--- a/src/mach/topology.c	2022-08-29 19:29:21.920078000 +0100
+++ b/src/mach/topology.c	2022-08-29 19:32:24.959522000 +0100
@@ -8,38 +8,27 @@
 #include <cpuinfo/log.h>
 #include <mach/api.h>
 
-#include <TargetConditionals.h>
 
-
 struct cpuinfo_mach_topology cpuinfo_mach_detect_topology(void) {
 	int cores = 1;
 	size_t sizeof_cores = sizeof(cores);
-	if (sysctlbyname("hw.physicalcpu_max", &cores, &sizeof_cores, NULL, 0) != 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.physicalcpu_max\") failed: %s", strerror(errno));
+	if (sysctlbyname("hw.ncpu", &cores, &sizeof_cores, NULL, 0) != 0) {
+		cpuinfo_log_error("sysctlbyname(\"hw.ncpu\") failed: %s", strerror(errno));
 	} else if (cores <= 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.physicalcpu_max\") returned invalid value %d", cores);
+		cpuinfo_log_error("sysctlbyname(\"hw.ncpu\") returned invalid value %d", cores);
 		cores = 1;
 	}
 
 	int threads = 1;
 	size_t sizeof_threads = sizeof(threads);
-	if (sysctlbyname("hw.logicalcpu_max", &threads, &sizeof_threads, NULL, 0) != 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.logicalcpu_max\") failed: %s", strerror(errno));
+	if (sysctlbyname("hw.ncpu", &threads, &sizeof_threads, NULL, 0) != 0) {
+		cpuinfo_log_error("sysctlbyname(\"ncpu\") failed: %s", strerror(errno));
 	} else if (threads <= 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.logicalcpu_max\") returned invalid value %d", threads);
+		cpuinfo_log_error("sysctlbyname(\"ncpu\") returned invalid value %d", threads);
 		threads = cores;
 	}
 
 	int packages = 1;
-#if !TARGET_OS_IPHONE
-	size_t sizeof_packages = sizeof(packages);
-	if (sysctlbyname("hw.packages", &packages, &sizeof_packages, NULL, 0) != 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.packages\") failed: %s", strerror(errno));
-	} else if (packages <= 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.packages\") returned invalid value %d", packages);
-		packages = 1;
-	}
-#endif
 
 	cpuinfo_log_debug("mach topology: packages = %d, cores = %d, threads = %d", packages, (int) cores, (int) threads);
 	struct cpuinfo_mach_topology topology = {
@@ -48,26 +37,5 @@
 		.threads = (uint32_t) threads
 	};
 
-#if !TARGET_OS_IPHONE
-	size_t cacheconfig_size = 0;
-	if (sysctlbyname("hw.cacheconfig", NULL, &cacheconfig_size, NULL, 0) != 0) {
-		cpuinfo_log_error("sysctlbyname(\"hw.cacheconfig\") failed: %s", strerror(errno));
-	} else {
-		uint64_t* cacheconfig = alloca(cacheconfig_size);
-		if (sysctlbyname("hw.cacheconfig", cacheconfig, &cacheconfig_size, NULL, 0) != 0) {
-			cpuinfo_log_error("sysctlbyname(\"hw.cacheconfig\") failed: %s", strerror(errno));
-		} else {
-			size_t cache_configs = cacheconfig_size / sizeof(uint64_t);
-			cpuinfo_log_debug("mach hw.cacheconfig count: %zu", cache_configs);
-			if (cache_configs > CPUINFO_MACH_MAX_CACHE_LEVELS) {
-				cache_configs = CPUINFO_MACH_MAX_CACHE_LEVELS;
-			}
-			for (size_t i = 0; i < cache_configs; i++) {
-				cpuinfo_log_debug("mach hw.cacheconfig[%zu]: %"PRIu64, i, cacheconfig[i]);
-				topology.threads_per_cache[i] = cacheconfig[i];
-			}
-		}
-	}
-#endif
 	return topology;
 }
--- a/BUILD.bazel	2022-08-30 18:06:11.488843000 +0100
+++ b/BUILD.bazel	2022-08-30 18:05:32.233127000 +0100
@@ -100,35 +100,7 @@
 cc_library(
     name = "cpuinfo_impl",
     srcs = select({
-        ":linux_x86_64": COMMON_SRCS + X86_SRCS + LINUX_SRCS + LINUX_X86_SRCS,
-        ":linux_arm": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS,
-        ":linux_armhf": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS,
-        ":linux_armv7a": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS,
-        ":linux_armeabi": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS,
-        ":linux_aarch64": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM64_SRCS,
-        ":linux_mips64": COMMON_SRCS + LINUX_SRCS,
-        ":linux_riscv64": COMMON_SRCS + LINUX_SRCS,
-        ":linux_s390x": COMMON_SRCS + LINUX_SRCS,
-        ":macos_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":macos_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":windows_x86_64": COMMON_SRCS + X86_SRCS + WINDOWS_X86_SRCS,
-        ":android_armv7": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS + ANDROID_ARM_SRCS,
-        ":android_arm64": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM64_SRCS + ANDROID_ARM_SRCS,
-        ":android_x86": COMMON_SRCS + X86_SRCS + LINUX_SRCS + LINUX_X86_SRCS,
-        ":android_x86_64": COMMON_SRCS + X86_SRCS + LINUX_SRCS + LINUX_X86_SRCS,
-        ":ios_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":ios_x86": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":ios_armv7": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":ios_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":ios_arm64e": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":ios_sim_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":watchos_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":watchos_x86": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":watchos_armv7k": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":watchos_arm64_32": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":tvos_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
-        ":tvos_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
-        ":emscripten_wasm": COMMON_SRCS + EMSCRIPTEN_SRCS,
+        "//conditions:default": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
     }),
     copts = select({
         ":windows_x86_64": [],
